* mark as known
* blank out parts of words to avoid boredom/easiness - DONE
* change askfn back to the actual askfn - DONE
* make so long concepts harder to remember
* narrow down space by ? random normal. or: if the likelihood of remembering a word is less than 0.5, show the first letter. this could be generalised? show % of word en acuerdo con la probabilidad of remembering it.< - partially complete ~ cypress
^ Clarify please.
i meant you can show letters and hide them depending on how likely they are to remember the word, as an extra boost

* Transliteration of user answers <- easy to do? ~ dunno

- TEST: Does Caterina share declarative memory with the rest of us?

-----------
- have a last seen. that will be used for recalculating, not the difference between the scheduled date and now
- possibly just use those with the earliest review dates as a sorter
- i changed it so that it just reassigns the queue and removes all n+0 ones
- whoever is fronting tomorrow if you see this please test it again
- checj why is it repeating the same thing twice?? slso reems to be introduceing words really quickly. too fast>??
    ~ cypress 

* mini goals, always 75%
* forced breaks, mini-game of hangman with previous words as intermission?
* minification should also deduplicate
// change to black background?
known vs learn may need rethink
 take the top 1/2 of the queue? or however many were added, that's how many get pushed away. would only work if the queue wasn't shuffled at all (i.e earliest is earliest)
 track how many times each ctx has been seen?
 // maximise the dissimilarity of words in the same session from one another, with special attention to beginnings and endings
 // penalise longer words

 // in tsv, aggressively filter out words that are the same on both sides, this means untranslated/nonsense

 CYCLE: halfway goal -> break/intermission minigame -> preview of what's ahead i.e what sentences you'll be able to understand
 // accuracy/speed statistics - a beatable target

 - make minifying part of the normal boot proc

------------------------

 // make the user interface and inputs pluggable
 // work from the top-down - what do i need to put it all together, i.e what types, then what do those functions depend on, etc.

consider:
 // generator model?

 // make


 - needs to ask when simulating
 - needs to know when to exit
 - should not need to redownload each and every single time
 - text to speech needs to work - needs to use the outer config
 - don't mutate the database. in fact, don't mutate anything. just fork the stream of contexts into the manager but also into the database. wait why do you even need the database for now? also its different properties seem unrelated to one another, so pointless.
 - make the backend immutable to allow for concurrent hypothetical calculations, while retaining performance?

 it doesn't actually need the 
 
 todo: make the config from interactive sesh